$btnStyles: (
    primary: (
        borderRadius: 100px,
        bgc: map-get($colors, red),
        color: map-get($colors, beige),
    ),
    blue: (
        borderRadius: 100px,
        bgc: map-get($colors, blue),
        color: map-get($colors, beige),
    ),
    white: (
        borderRadius: 100px,
        bgc: map-get($colors, natural-0),
        color: map-get($colors, red),
    ),
    outline: (
        borderRadius: 100px,
        border: 1px solid map-get($colors, red),
        bgc: transparent,
        color: map-get($colors, red),
    ),
    text: (
        borderBottom: 1px solid map-get($colors, red),
        bgc: transparent,
        color: map-get($colors, red),
    ),
    textBlue: (
        bgc: transparent,
        color: map-get($colors, blue),
    ),
    textRed: (
        bgc: transparent,
        color: map-get($colors, red),
    )

);
$btnSizes: (
    large: (
        textStyle: h6,
        height: 4.8rem,
        padding: .8rem 1.6rem,
        circleSize: 8px,
        translate: 1.6rem,
    ),
    default: (
        textStyle: p,
        height: 4rem,
        padding: .8rem 1.6rem,
        circleSize: 4px,
        translate: .8rem,
    ),
    small: (
        textStyle: smallText,
        height: 3rem,
        padding: .4rem 1.6rem,
        circleSize: 3px,
        translate: .6rem,
    ),
);
@mixin btnBasic(){
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;

    text-align: center;
    
    transition: width .3s ease;

    &:hover{ width: 100%; }

    span {
        display: inline-block;
        position: relative;
        transition: all .3s ease;
    
        &::after {
            content: "";
            position: absolute;
            border-radius: 50%;
            
            opacity: 0;
            transition: all .3s ease;   
        }
    }
    &:hover span::after{ opacity: 1; }
}
@mixin buttonStyle($bgc, $color, $border: null, $borderBottom: null, $borderRadius: null){
    border-bottom: $borderBottom;
    border: $border;
    border-radius: $borderRadius;
    background-color: $bgc;
    color: $color;

    span::after{
        background-color: $color;
    }
}
@mixin buttonSize($textStyle, $height, $padding, $circleSize, $translate){
    @include textStyle($textStyle);
    width: calc(100% - $translate);
    height: $height;
    padding: $padding;

    span::after{
        top: calc(50% - $circleSize / 2);
        right: -$translate;

        width: $circleSize;
        height: $circleSize;
    }
    &:hover span{
        transform: translateX(-$translate / 2 );
    }
}


.btnBox{
    display: flex;
    align-items: center;
    justify-content: center;

    @each $style, $styleProps in $btnStyles {
        @each $size, $sizeProps in $btnSizes {
            .btn.#{$style}.#{$size}{
                @include btnBasic();
                @include buttonStyle(
                    map-get($styleProps, bgc),
                    map-get($styleProps, color),
                    map-get($styleProps, border),
                    map-get($styleProps, borderBottom),
                    map-get($styleProps, borderRadius),
                );
                @include buttonSize(
                    map-get($sizeProps, textStyle),
                    map-get($sizeProps, height),
                    map-get($sizeProps, padding),
                    map-get($sizeProps, circleSize),
                    map-get($sizeProps, translate),
                );
            }
        }
    }
}
.formBox{
    display: flex;
    align-items: center;
    justify-content: center;

    .btn{
        @include btnBasic();
        @include buttonSize(
            map-get(map-get($btnSizes, default), textStyle),
            map-get(map-get($btnSizes, default), height),
            map-get(map-get($btnSizes, default), padding),
            map-get(map-get($btnSizes, default), circleSize),
            map-get(map-get($btnSizes, default), translate),
        );
        &.option{
            @include buttonStyle(
                map-get($colors, beige),
                map-get($colors, brown),
                null,
                null,
                100px,
            );
        }
        &.nextQ{
            @include buttonStyle(
                map-get($colors, red),
                map-get($colors, beige),
                null,
                null,
                100px,
            );
        }
        &.lastQ{
            @include buttonStyle(
                transparent,
                map-get($colors, red),
                null,
                1px solid map-get($colors, red),
                0,
            );
        }

    }
    &.-active .option{
        border: 1px solid map-get($colors, red);
    }
}